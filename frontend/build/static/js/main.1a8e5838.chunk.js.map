{"version":3,"sources":["logo.svg","components/navbar/NavBar.js","components/infobox/InfoboxContainer.js","components/main/MainContainer.js","components/user/plans/Card.js","components/user/plans/MyPlans.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","class","href","src","width","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","React","Component","InfoboxContainer","props","plan","this","name","description","cost","HomeContainer","state","plans","fetch","then","results","json","setState","catch","err","console","log","list","length","i","push","className","getAllPlans","Card","border","select","onClick","bind","MyPlans","addPlan","method","headers","body","JSON","stringify","res","genPlanCards","box","planCards","cards","toggle","button","_id","value","e","target","removePlans","App","exact","path","component","Main","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1a8e5838.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport { NavLink } from 'react-router-dom';\n\nclass NavBar extends React.Component {\n\n    render() {\n        return (\n\n            <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <a class=\"navbar-brand\" href=\"#\">\n                    <img src=\"logo.png\" width=\"250\" class=\"d-inline-block align-top\" alt=\"\" />\n                </a>\n                <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span class=\"navbar-toggler-icon\"></span>\n                </button>\n                <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul class=\"navbar-nav\">\n                        <li class=\"nav-item active\">\n                            <a class=\"nav-link\" href=\"/\">Home<span class=\"sr-only\">(current)</span></a>\n                        </li>\n                        <li class=\"nav-item\">\n                            <NavLink to=\"/myplans\"><a class=\"nav-link\">My Plans</a></NavLink>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        )\n    }\n}\n\nexport default NavBar","import React from 'react'\n\nclass InfoboxContainer extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.plan = this.props.plan\n    }\n\n    render() {\n        return (\n            <div class=\"card mb-3 bshadow\">\n                <img class=\"card-img-top\" src={this.plan.name+\".jpg\"} alt=\"Card image cap\" />\n                <div class=\"card-body\">\n                    <h4 class=\"card-title\">{this.plan.name} Insurance</h4>\n                    <p class=\"card-text\">{this.plan.description}</p>\n                    <p class=\"card-text\"><small class=\"text-muted\">Avg. Cost: ${this.plan.cost}/mo</small></p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default InfoboxContainer","import React from 'react'\nimport NavBar from '../navbar/NavBar'\nimport Infobox from '../infobox/InfoboxContainer'\n\nclass HomeContainer extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            plans: []\n        }\n    }\n\n    componentDidMount() {\n        fetch(\"http://localhost:5000/plans/all\")\n            .then(results => results.json())\n            .then(plans => {\n                this.setState({\n                    plans: plans\n                })\n            })\n            .catch(err => console.log(err))\n    }\n\n    getAllPlans() {\n        let list = []\n        console.log(this.state.plans.length)\n        for (let i = 0; i < this.state.plans.length; i++) {\n            let plan = this.state.plans[i]\n            list.push(<Infobox plan={plan} />)\n        }\n        return list\n    }\n\n    render() {\n        return (\n            <>\n            <div className=\"container mt-3\">\n                <div className=\"row justify-content-center\">\n                    <div className=\"col-md-5\">\n                        <div className=\"card\">\n                            <div className=\"card-body text-left\">\n                                <h5 className=\"card-title text-danger font-weight-bold\">Coronavirus COVID-19: Prevention and preparedness</h5>\n                                <p className=\"card-text text-left\">Coronavirus COVID-19: Prevention and preparedness\n                                    Humana is actively monitoring the coronavirus situation and coordinating with public health authorities. \n                                    We have plans in place to keep our members, employees and provider partners safe, and as the situation evolves we will adapt our policies to ensure access to essential care.<hr></hr>\n                                    Itâ€™s important for people to stay grounded in facts from public health authorities, including the Centers for Disease Control and Prevention.<br /><br />\n                                    The CDC recommends that you wash your hands frequently and thoroughly, clean and disinfect surfaces and frequently touched objects, and avoid touching your face. You should also stay home when you are sick and avoid close contact with others who are sick.\n                                    Humana will provide updates as the situation changes.\n                                    Read this article for more information.\n                                </p>\n                                <a href=\"https://www.humana.com/\" className=\"btn btn-success\">Read More</a>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-md-7\">{this.getAllPlans()}</div>\n                </div>\n            </div>\n            </>\n        )\n    }\n}\n\nexport default HomeContainer","import React from 'react'\n\nclass Card extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.plan = this.props.plan\n        this.state = {\n            border: null\n        }\n    }\n\n    select() {\n        this.props.select(this.plan)\n        if (this.state.border) {\n            this.state.border = null\n        } else {\n            this.state.border = \"border border-danger rounded\"\n        }\n    }\n\n    render() {\n        return (\n               <div class=\"col-sm mt-3\">\n               <div className={this.state.border}>\n                    <div class=\"card\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">{this.plan.name}</h5>\n                        <p class=\"card-text\">{this.plan.description}</p>\n                        <a href=\"#\" class=\"btn btn-secondary\" onClick={this.select.bind(this)}>Select</a>\n                    </div>\n                    </div>\n                    </div>\n                </div>\n        )\n    }\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nclass MyPlans extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.select = this.select.bind(this)\n        this.state = {\n            plans: [],\n            box: {}\n        }\n        this.planCards = []\n    }\n\n    componentDidMount() {\n        fetch(\"http://localhost:5000/users/5e69b32167dbfb1157c1becf/myplans\")\n            .then(res => res.json())\n            .then(plans => {\n                this.setState({\n                    plans: plans\n                })\n            })\n            .catch(err => console.log(err))\n            this.genPlanCards()\n    }\n\n    genPlanCards() {\n        let cards = []\n        for (let i = 0; i < this.state.plans.length; i++) {\n            cards.push(\n                <div className={this.props.border}>\n                    <Card plan={this.state.plans[i]} select={this.select} />\n                    {this.props.toggle ? this.props.button : \"\"}\n                </div>\n            )\n        }\n        this.planCards = cards\n    }\n\n    select(plan) {\n        if (plan.name in this.state.box) {\n            delete this.state.box[plan.name]\n        }else {\n             this.state.box[plan.name] = plan._id\n        }\n    }\n\n    addPlan = (type) => {\n        console.log('HIT')\n        fetch('http://localhost:5000/users/5e69b32167dbfb1157c1becf/addplan', {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n                },\n            body: JSON.stringify({name: type})\n        }).then(res => res.json())\n        .then(plans => {\n            this.setState({\n                plans: plans\n            })\n            this.genPlanCards()\n\n        })\n        .catch(err => console.log(err))\n    }\n\n    removePlans() {\n        fetch(\"http://localhost:5000/users/5e69b32167dbfb1157c1becf/myplans\", { \n            method: 'delete', \n            headers: {\n            'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(this.state.box)\n        }).then(res => res.json())\n        .then(plans => {\n            this.setState({\n                plans: plans\n            })\n        })\n        .catch(err => console.log(err))\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"container mt-3\">\n                    <div className=\"text-left mb-3\">\n                        <button className=\"btn btn-outline-primary\" value=\"Health\" onClick={(e) => this.addPlan(e.target.value)}>Add Health</button>&nbsp;\n                        <button className=\"btn btn-outline-primary\" value=\"Dental\" onClick={(e) => this.addPlan(e.target.value)}>Add Dental</button>&nbsp;\n                        <button className=\"btn btn-outline-primary\" value=\"Vision\" onClick={(e) => this.addPlan(e.target.value)}>Add Vision</button>\n                    </div>\n                    <h3 className=\"text-left\">Here are your active plans:</h3>\n                    <div className=\"row\">\n                        {this.genPlanCards()}\n                        {this.planCards}\n                    </div>\n                    <div class=\"text-left mt-3\">\n                        <button class=\"btn btn-outline-secondary\" onClick={e => this.removePlans()}>Remove Plans</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MyPlans","import React from 'react';\nimport logo from './logo.svg';\nimport \"jquery/dist/jquery.min.js\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './components/main/MainContainer'\nimport Main from './components/main/MainContainer'\nimport MyPlans from './components/user/plans/MyPlans'\nimport NavBar from './components/navbar/NavBar'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Router>\n    <NavBar />\n        <Route exact path=\"/\" component={Main}/>\n        <Route exact path=\"/myplans\" component={MyPlans}/>\n    </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />\n                ,\n                document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}